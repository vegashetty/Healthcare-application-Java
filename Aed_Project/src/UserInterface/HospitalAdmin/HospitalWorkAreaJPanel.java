/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.HospitalAdmin;

import Business.Employee.Employee;
import Business.Locality.Locality;
import Business.Organization.DoctorOrganization;
import Business.Organization.HospitalOrganization;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.Patient.VitalSignSensor;
import Business.Patient.VitalSignSensorHistory;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AssignDoctorWorkRequest;
import Business.WorkQueue.MonitorVitalsWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vega
 */
public class HospitalWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form HospitalWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private Locality locality;
    private UserAccount userAccount;
    private HospitalOrganization hospOrg;
     static int patientcount = 0;
    /**
     * Creates new form SelectDonorJPanel
     */
    public HospitalWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Locality locality) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.locality = locality;
        this.hospOrg = (HospitalOrganization)organization;
        populateDoctorComboBox();
        populateTable();
    }
    public void populateDoctorComboBox(){
        doctorjComboBox.removeAllItems();
        
         Organization org = null;
        for (Organization organization : locality.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof DoctorOrganization){
                org = organization;
                break;
            }
        }
        if (org!=null){
 
    
           for (Employee e : org.getEmployeeDirectory().getEmployeeList())
           {
            doctorjComboBox.addItem(e);
        }
    }
        
    
    }
     public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)patientjTable.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
             
        
          
        
                    
                  MonitorVitalsWorkRequest adwr = (MonitorVitalsWorkRequest)request;    
          
            Object[] row = new Object[5];
            row[0] = adwr;
            row[1] = adwr.getPatient();
            //row[2]= adwr.getPatient()
            row[2] = adwr.getReceiver();
             row[4] = adwr.getStatus();
             
             
              for(VitalSignSensorHistory vssh : adwr.getPatient().getVitalSignSensorList().getList())
            {ArrayList<VitalSignSensor> vitalSignList = vssh.getHistory();

            for (VitalSignSensor vitalSign : vitalSignList) {
             
             
            row[3] = vitalSign.getStatus();
            }
            }
        
            model.addRow(row);
        
            }
            
     
    }
     

         


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        doctorjComboBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientjTable = new javax.swing.JTable();
        admitjButton = new javax.swing.JButton();
        viewjButton = new javax.swing.JButton();
        jButtonview = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        docjTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        caregiverjTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(231, 231, 253));

        jLabel1.setFont(new java.awt.Font("Superclarendon", 1, 18)); // NOI18N
        jLabel1.setText("Welcome Hospital Admin!");

        jLabel3.setText("Choose Doctor : ");

        doctorjComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        doctorjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorjComboBoxActionPerformed(evt);
            }
        });

        patientjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "", "Patient ID", "Assigned Caregiver ", "Vital Status", "Message from Caregiver"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(patientjTable);
        if (patientjTable.getColumnModel().getColumnCount() > 0) {
            patientjTable.getColumnModel().getColumn(0).setMinWidth(0);
            patientjTable.getColumnModel().getColumn(0).setPreferredWidth(0);
            patientjTable.getColumnModel().getColumn(0).setMaxWidth(0);
            patientjTable.getColumnModel().getColumn(4).setPreferredWidth(100);
        }

        admitjButton.setBackground(new java.awt.Color(51, 51, 255));
        admitjButton.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        admitjButton.setForeground(new java.awt.Color(255, 255, 255));
        admitjButton.setText("Admit Patient");
        admitjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                admitjButtonActionPerformed(evt);
            }
        });

        viewjButton.setBackground(new java.awt.Color(51, 51, 255));
        viewjButton.setForeground(new java.awt.Color(255, 255, 255));
        viewjButton.setText("View Patient");
        viewjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewjButtonActionPerformed(evt);
            }
        });

        jButtonview.setBackground(new java.awt.Color(51, 51, 255));
        jButtonview.setForeground(new java.awt.Color(255, 255, 255));
        jButtonview.setText("View Doctor's ");
        jButtonview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonviewActionPerformed(evt);
            }
        });

        jLabel8.setIcon(new javax.swing.ImageIcon("/Users/vega/Downloads/phca_logo.png")); // NOI18N

        jLabel9.setFont(new java.awt.Font("Silom", 0, 10)); // NOI18N
        jLabel9.setText("National Pediatric Pneumonia Healthcare");

        jLabel2.setText("Provide Status to Doctor :");

        jLabel4.setText("Provide Status to Caregiver :");

        caregiverjTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caregiverjTextFieldActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel5.setText("Assign doctor to patient");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(257, 528, Short.MAX_VALUE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel9))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 687, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(77, 77, 77)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel4)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(239, 239, 239)
                                        .addComponent(viewjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButtonview, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(doctorjComboBox, 0, 177, Short.MAX_VALUE)
                                    .addComponent(docjTextField)
                                    .addComponent(caregiverjTextField)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(296, 296, 296)
                                .addComponent(jLabel5))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(205, 205, 205)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(285, 285, 285)
                                .addComponent(admitjButton)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addGap(29, 29, 29)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewjButton)
                    .addComponent(jButtonview))
                .addGap(31, 31, 31)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(doctorjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(docjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(caregiverjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(42, 42, 42)
                .addComponent(admitjButton)
                .addGap(39, 39, 39))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void admitjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_admitjButtonActionPerformed
 int selectedRow = patientjTable.getSelectedRow();
 MonitorVitalsWorkRequest selectedPatient;
        
        if(selectedRow < 0)
        {
            JOptionPane.showMessageDialog(this,"Select a row","warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        else{
            selectedPatient = (MonitorVitalsWorkRequest)patientjTable.getValueAt(selectedRow,0);
        }
        
       
       
        
        if(selectedPatient.getMessage()!=null)
        {
            JOptionPane.showMessageDialog(this, "Assigned already.","Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Employee e = (Employee)doctorjComboBox.getSelectedItem();
        //for (UserAccount ua : egetEmployeeDirectory().getEmployeeList())

        //e.

       
        Patient selectedPerson;

        if(selectedRow < 0)
        {
            JOptionPane.showMessageDialog(this,"Select a row","warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        else{
            selectedPerson = (Patient)patientjTable.getValueAt(selectedRow,1);
            //System.out.println("er");
        }
        AssignDoctorWorkRequest request = new AssignDoctorWorkRequest();
        request.setPatient(selectedPerson);

        Organization org = null;
        for (Organization organization : locality.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof DoctorOrganization){
                org = organization;
                break;
            }
        }
        if (org!=null){
          
                    for(UserAccount u : org.getUserAccountDirectory().getUserAccountList())
                    {
                        if(u.getEmployee() == e)
                        {
                            WorkRequest req = request;
                                       

                            org.getWorkQueue().getWorkRequestList().add(req);
                            
                            u.getWorkQueue().getWorkRequestList().add(req);

                            

                            request.setReceiver(u);
                            
                             request.setStatus(docjTextField.getText());
                         docjTextField.setText("");
                            JOptionPane.showMessageDialog(this,"Patient Admitted and assigned to Doctor","Info",JOptionPane.INFORMATION_MESSAGE);

DefaultTableModel model = (DefaultTableModel) patientjTable.getModel();
 populateTable();
 //model.removeRow(selectedRow);
  if(e.getPatientCount() == 0)
       {
        patientcount++;
       request.setCount(patientcount);
       e.setPatientCount(patientcount);}
       //  System.out.println("sss"+request.getCount());
  
                          
       else
       {
         request.setCount(request.getCount() + 1);
       e.setPatientCount(e.getPatientCount() + 1);}
                            System.out.println("sd" + e.getPatientCount());
                        }
                    
        }
                }
        

   
                              
          MonitorVitalsWorkRequest mvwr = ( MonitorVitalsWorkRequest)patientjTable.getValueAt(selectedRow,0);
         
        mvwr.setMessage(caregiverjTextField.getText());  
        caregiverjTextField.setText("");

        //populateTable();
  
 // TODO add your handling code here:
    }//GEN-LAST:event_admitjButtonActionPerformed

    private void doctorjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorjComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_doctorjComboBoxActionPerformed

    private void viewjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewjButtonActionPerformed
 int selectedRow = patientjTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.", "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Patient p = (Patient)patientjTable.getValueAt(selectedRow, 1);
        ViewPatientJPanel vuvsJPanel = new ViewPatientJPanel(userProcessContainer, p);
        userProcessContainer.add("vuvsJPanel", vuvsJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);          // TODO add your handling code here:
    }//GEN-LAST:event_viewjButtonActionPerformed

    private void jButtonviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonviewActionPerformed
      
        
        ViewDoctorJPanel vuvsJPanel = new ViewDoctorJPanel(userProcessContainer, locality);
        userProcessContainer.add("vuvsJPanel", vuvsJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);    // TODO add your handling code here:
    }//GEN-LAST:event_jButtonviewActionPerformed

    private void caregiverjTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caregiverjTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_caregiverjTextFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton admitjButton;
    private javax.swing.JTextField caregiverjTextField;
    private javax.swing.JTextField docjTextField;
    private javax.swing.JComboBox doctorjComboBox;
    private javax.swing.JButton jButtonview;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable patientjTable;
    private javax.swing.JButton viewjButton;
    // End of variables declaration//GEN-END:variables
}
